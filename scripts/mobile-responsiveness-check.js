const fs = require('fs');
const path = require('path');

// Colores para la consola
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkMobileResponsiveness() {
  log('\nüîç VERIFICACI√ìN DE RESPONSIVIDAD M√ìVIL', 'bold');
  log('=' .repeat(50), 'blue');

  // 1. Verificar hook useIsMobile
  log('\n1. Verificando hook useIsMobile...', 'blue');
  const useMobilePath = path.join(process.cwd(), 'src', 'hooks', 'use-mobile.tsx');
  if (fs.existsSync(useMobilePath)) {
    const content = fs.readFileSync(useMobilePath, 'utf8');
    if (content.includes('MOBILE_BREAKPOINT = 768')) {
      log('   ‚úÖ Hook useIsMobile encontrado con breakpoint 768px', 'green');
    } else {
      log('   ‚ö†Ô∏è  Hook useIsMobile encontrado pero sin breakpoint est√°ndar', 'yellow');
    }
  } else {
    log('   ‚ùå Hook useIsMobile no encontrado', 'red');
  }

  // 2. Verificar configuraci√≥n de Tailwind
  log('\n2. Verificando configuraci√≥n de Tailwind...', 'blue');
  const tailwindPath = path.join(process.cwd(), 'tailwind.config.ts');
  if (fs.existsSync(tailwindPath)) {
    const content = fs.readFileSync(tailwindPath, 'utf8');
    if (content.includes('container') && content.includes('screens')) {
      log('   ‚úÖ Configuraci√≥n de container y screens encontrada', 'green');
    } else {
      log('   ‚ö†Ô∏è  Configuraci√≥n b√°sica de Tailwind encontrada', 'yellow');
    }
  }

  // 3. Verificar componentes principales
  log('\n3. Verificando componentes principales...', 'blue');
  const componentsToCheck = [
    { path: 'src/components/layout/Header.tsx', name: 'Header' },
    { path: 'src/components/layout/Footer.tsx', name: 'Footer' },
    { path: 'src/components/ui/sidebar.tsx', name: 'Sidebar' },
    { path: 'src/components/ui/modal.tsx', name: 'Modal' }
  ];

  componentsToCheck.forEach(component => {
    const fullPath = path.join(process.cwd(), component.path);
    if (fs.existsSync(fullPath)) {
      const content = fs.readFileSync(fullPath, 'utf8');
      const responsiveClasses = [
        'md:', 'lg:', 'xl:', 'sm:', '2xl:',
        'hidden md:', 'md:hidden', 'lg:hidden',
        'grid-cols-1', 'md:grid-cols', 'lg:grid-cols'
      ];
      
      const foundClasses = responsiveClasses.filter(cls => content.includes(cls));
      if (foundClasses.length > 0) {
        log(`   ‚úÖ ${component.name}: ${foundClasses.length} clases responsive encontradas`, 'green');
      } else {
        log(`   ‚ö†Ô∏è  ${component.name}: Pocas clases responsive encontradas`, 'yellow');
      }
    } else {
      log(`   ‚ùå ${component.name}: Archivo no encontrado`, 'red');
    }
  });

  // 4. Verificar p√°ginas principales
  log('\n4. Verificando p√°ginas principales...', 'blue');
  const pagesToCheck = [
    'src/app/[lang]/page.tsx',
    'src/app/[lang]/courses/page.tsx',
    'src/app/[lang]/courses/[id]/page.tsx',
    'src/app/[lang]/admin/dashboard/page.tsx'
  ];

  pagesToCheck.forEach(pagePath => {
    const fullPath = path.join(process.cwd(), pagePath);
    if (fs.existsSync(fullPath)) {
      const content = fs.readFileSync(fullPath, 'utf8');
      const responsivePatterns = [
        /grid.*md:/g,
        /flex.*md:/g,
        /text-.*md:/g,
        /px-.*md:/g,
        /py-.*md:/g
      ];
      
      const matches = responsivePatterns.reduce((acc, pattern) => {
        return acc + (content.match(pattern) || []).length;
      }, 0);
      
      if (matches > 5) {
        log(`   ‚úÖ ${path.basename(pagePath)}: Bien optimizada para m√≥vil`, 'green');
      } else if (matches > 0) {
        log(`   ‚ö†Ô∏è  ${path.basename(pagePath)}: Parcialmente optimizada`, 'yellow');
      } else {
        log(`   ‚ùå ${path.basename(pagePath)}: Necesita optimizaci√≥n m√≥vil`, 'red');
      }
    }
  });

  // 5. Verificar CSS global
  log('\n5. Verificando CSS global...', 'blue');
  const globalCssPath = path.join(process.cwd(), 'src', 'app', 'globals.css');
  if (fs.existsSync(globalCssPath)) {
    const content = fs.readFileSync(globalCssPath, 'utf8');
    if (content.includes('@media') || content.includes('responsive')) {
      log('   ‚úÖ CSS responsive personalizado encontrado', 'green');
    } else {
      log('   ‚ÑπÔ∏è  CSS global b√°sico (usando Tailwind para responsive)', 'blue');
    }
  }

  // 6. Verificar meta viewport
  log('\n6. Verificando configuraci√≥n de viewport...', 'blue');
  const layoutPath = path.join(process.cwd(), 'src', 'app', 'layout.tsx');
  if (fs.existsSync(layoutPath)) {
    const content = fs.readFileSync(layoutPath, 'utf8');
    if (content.includes('viewport') || content.includes('width=device-width')) {
      log('   ‚úÖ Meta viewport configurado', 'green');
    } else {
      log('   ‚ö†Ô∏è  Meta viewport no encontrado en layout principal', 'yellow');
    }
  }

  // 7. Recomendaciones
  log('\nüìã RECOMENDACIONES PARA MEJORAR RESPONSIVIDAD:', 'bold');
  log('=' .repeat(50), 'blue');
  
  const recommendations = [
    '‚Ä¢ Verificar que todas las im√°genes tengan tama√±os responsive',
    '‚Ä¢ Asegurar que los formularios sean f√°ciles de usar en m√≥vil',
    '‚Ä¢ Probar la navegaci√≥n en dispositivos t√°ctiles',
    '‚Ä¢ Verificar que los botones tengan tama√±o m√≠nimo de 44px',
    '‚Ä¢ Asegurar que el texto sea legible sin zoom',
    '‚Ä¢ Probar el rendimiento en dispositivos m√≥viles',
    '‚Ä¢ Verificar que los modales se adapten a pantallas peque√±as',
    '‚Ä¢ Asegurar que las tablas sean scrolleables horizontalmente'
  ];

  recommendations.forEach(rec => {
    log(rec, 'yellow');
  });

  // 8. Herramientas de testing
  log('\nüõ†Ô∏è  HERRAMIENTAS RECOMENDADAS PARA TESTING:', 'bold');
  log('=' .repeat(50), 'blue');
  
  const tools = [
    '‚Ä¢ Chrome DevTools - Device Mode',
    '‚Ä¢ Lighthouse Mobile Audit',
    '‚Ä¢ BrowserStack para testing real',
    '‚Ä¢ Google PageSpeed Insights',
    '‚Ä¢ WebPageTest.org',
    '‚Ä¢ Responsive Design Checker'
  ];

  tools.forEach(tool => {
    log(tool, 'blue');
  });

  log('\n‚úÖ Verificaci√≥n de responsividad m√≥vil completada', 'green');
  log('\nüí° Pr√≥ximos pasos:', 'bold');
  log('   1. Probar la aplicaci√≥n en dispositivos reales', 'yellow');
  log('   2. Ejecutar auditor√≠a de Lighthouse', 'yellow');
  log('   3. Verificar Core Web Vitals en m√≥vil', 'yellow');
  log('   4. Optimizar im√°genes para diferentes densidades', 'yellow');
}

// Ejecutar verificaci√≥n
checkMobileResponsiveness();