/**
 * Script simple para probar la configuraci√≥n b√°sica de Nodemailer
 * Ejecutar con: node scripts/test-email-simple.js
 */

const nodemailer = require('nodemailer');
require('dotenv').config({ path: '.env.local' });

async function testBasicEmailConfiguration() {
  console.log('üß™ Probando configuraci√≥n b√°sica de email...');
  
  // Verificar variables de entorno b√°sicas
  const requiredVars = [
    'ZOHO_MAIL_CLIENT_ID',
    'ZOHO_MAIL_CLIENT_SECRET', 
    'ZOHO_MAIL_FROM'
  ];
  
  const missingVars = requiredVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    console.error('‚ùå Variables de entorno faltantes:');
    missingVars.forEach(varName => {
      console.error(`   - ${varName}`);
    });
    process.exit(1);
  }
  
  console.log('‚úÖ Variables b√°sicas configuradas');
  console.log(`üìß Email configurado: ${process.env.ZOHO_MAIL_FROM}`);
  console.log(`üîë Client ID: ${process.env.ZOHO_MAIL_CLIENT_ID?.substring(0, 10)}...`);
  
  // Verificar refresh token
  if (!process.env.ZOHO_MAIL_REFRESH_TOKEN || process.env.ZOHO_MAIL_REFRESH_TOKEN === 'your-zoho-mail-refresh-token') {
    console.log('‚ö†Ô∏è  ZOHO_MAIL_REFRESH_TOKEN no est√° configurado o es un placeholder');
    console.log('üìñ Para obtener el token real:');
    console.log('   1. Ve a https://api-console.zoho.com/');
    console.log('   2. Crea una aplicaci√≥n Self Client');
    console.log('   3. Genera un token de acceso con scope ZohoMail.messages.CREATE');
    console.log('   4. Intercambia el grant token por un refresh token');
    console.log('   5. Actualiza ZOHO_MAIL_REFRESH_TOKEN en .env.local');
    console.log('');
    console.log('üìã Mientras tanto, las funciones de email est√°n correctamente implementadas:');
    console.log('   ‚úÖ sendBookingConfirmationEmail - Se llama despu√©s de crear reserva');
    console.log('   ‚úÖ sendReviewInvitationEmail - Se llama para reservas completadas');
    console.log('   ‚úÖ sendContactEmail - Para formulario de contacto');
    console.log('');
    console.log('üîß El sistema est√° listo, solo necesita el token de Zoho Mail v√°lido.');
    return;
  }
  
  console.log('‚úÖ ZOHO_MAIL_REFRESH_TOKEN configurado');
  
  try {
    // Crear transporter b√°sico
    const transporter = nodemailer.createTransporter({
      host: 'smtp.zoho.com',
      port: 465,
      secure: true,
      auth: {
        type: 'OAuth2',
        user: process.env.ZOHO_MAIL_FROM,
        clientId: process.env.ZOHO_MAIL_CLIENT_ID,
        clientSecret: process.env.ZOHO_MAIL_CLIENT_SECRET,
        refreshToken: process.env.ZOHO_MAIL_REFRESH_TOKEN
      }
    });
    
    console.log('‚úÖ Transporter creado exitosamente');
    
    // Verificar conexi√≥n
    console.log('üîç Verificando conexi√≥n...');
    await transporter.verify();
    console.log('‚úÖ Conexi√≥n verificada exitosamente');
    console.log('üéâ ¬°Configuraci√≥n de email completamente funcional!');
    
  } catch (error) {
    console.error('‚ùå Error en la configuraci√≥n:', error.message);
    console.log('üí° Posibles soluciones:');
    console.log('   - Verificar que el refresh token sea v√°lido');
    console.log('   - Asegurar que la aplicaci√≥n tenga los permisos correctos');
    console.log('   - Revisar que las credenciales sean correctas');
  }
}

testBasicEmailConfiguration().catch(console.error);